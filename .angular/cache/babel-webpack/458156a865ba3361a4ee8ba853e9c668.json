{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { OperationBatcher } from \"./batching.js\";\nexport { OperationBatcher } from \"./batching.js\";\n\nvar BatchLink = function (_super) {\n  __extends(BatchLink, _super);\n\n  function BatchLink(fetchParams) {\n    var _this = _super.call(this) || this;\n\n    var _a = fetchParams || {},\n        batchDebounce = _a.batchDebounce,\n        _b = _a.batchInterval,\n        batchInterval = _b === void 0 ? 10 : _b,\n        _c = _a.batchMax,\n        batchMax = _c === void 0 ? 0 : _c,\n        _d = _a.batchHandler,\n        batchHandler = _d === void 0 ? function () {\n      return null;\n    } : _d,\n        _e = _a.batchKey,\n        batchKey = _e === void 0 ? function () {\n      return '';\n    } : _e;\n\n    _this.batcher = new OperationBatcher({\n      batchDebounce: batchDebounce,\n      batchInterval: batchInterval,\n      batchMax: batchMax,\n      batchHandler: batchHandler,\n      batchKey: batchKey\n    });\n\n    if (fetchParams.batchHandler.length <= 1) {\n      _this.request = function (operation) {\n        return _this.batcher.enqueueRequest({\n          operation: operation\n        });\n      };\n    }\n\n    return _this;\n  }\n\n  BatchLink.prototype.request = function (operation, forward) {\n    return this.batcher.enqueueRequest({\n      operation: operation,\n      forward: forward\n    });\n  };\n\n  return BatchLink;\n}(ApolloLink);\n\nexport { BatchLink }; //# sourceMappingURL=batchLink.js.map","map":null,"metadata":{},"sourceType":"module"}