{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        _e = _a.fetchPolicy,\n        fetchPolicy = _e === void 0 ? 'network-only' : _e,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, mutationStoreValue, self;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 13);\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 14);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 15);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      _this.fetchCancelFns.delete(queryId);\n\n      applyNextFetchPolicy(options);\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"sources":["/Users/dev/Documents/Projects/Schlosswochen-Inscription/node_modules/@apollo/client/core/QueryManager.js"],"names":["__assign","__awaiter","__generator","invariant","InvariantError","equal","execute","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","ApolloError","isApolloError","ObservableQuery","applyNextFetchPolicy","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","mutationStore","create","stop","_this","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","errorPolicy","_e","fetchPolicy","keepRootFields","context","mutationId","mutationStoreValue","self","_f","label","generateMutationId","transform","document","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","getObservableFromLink","result","graphQLErrors","errors","storeResult","markMutationResult","removeOptimistic","subscribe","next","err","networkError","cacheWrites","skipCache","push","data","dataId","query","updateQueries_1","observableQuery","queryName","call","updater","get","diff","returnPartialData","optimistic","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","id","asQuery","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","fetchQuery","options","networkStatus","fetchQueryObservable","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","transformed","transformDocument","forLink","transformForLink","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","shouldForceResolvers","defaultVars","definitions","map","def","kind","operation","add","doc","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","concat","JSON","stringify","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","byVariables_1","varJson_1","concast","cleanup","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","hasErrors","markError","markResult","markReady","aqr","ready","normalized","assign","fromVariables","fetchQueryByPolicy","reason","setTimeout","includedQueriesById","lastDiff","getDiff","results","batch","onWatchUpdated","watch","watcher","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, _e = _a.fetchPolicy, fetchPolicy = _e === void 0 ? 'network-only' : _e, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, mutationStoreValue, self;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);\n                        __DEV__ ? invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', 13);\n                        mutationId = this.generateMutationId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_f.sent());\n                        _f.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                        throw new ApolloError({\n                                            graphQLErrors: result.errors,\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === 'ignore' &&\n                                        graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: optimisticResponse ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        resolve(storeResult);\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            cacheWrites.push({\n                result: result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            mutation.refetchQueries ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.transform(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                            }\n                        }\n                        update(cache, result, {\n                            context: mutation.context,\n                            variables: mutation.variables,\n                        });\n                    }\n                    if (!skipCache && !mutation.keepRootFields) {\n                        cache.modify({\n                            id: 'ROOT_MUTATION',\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                __DEV__ && invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) })\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.') : invariant(options.query, 14);\n        __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 15);\n        __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);\n        __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc).document, false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (__DEV__ && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" &&\n                    fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        this.getQuery(queryId).stop();\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = canonicalStringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.cleanup(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n            var hasErrors = isNonEmptyArray(result.errors);\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                queryInfo.markResult(result, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = result.errors;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n        };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.cleanup(function () {\n            _this.fetchCancelFns.delete(queryId);\n            applyNextFetchPolicy(options);\n        });\n        return concast;\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map;\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: optimistic && removeOptimistic || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo &&\n                        watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (__DEV__ &&\n                !returnPartialData &&\n                !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (data && _this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 :\n            (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ? 1\n                : 2;\n        var resultsFromLink = function () {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(),\n                    ];\n                }\n                return [\n                    resultsFromLink(),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(readCache()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return [\n                        resultsFromCache(queryInfo.getDiff()),\n                        resultsFromLink(),\n                    ];\n                }\n                return [resultsFromLink()];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n"]},"metadata":{},"sourceType":"module"}