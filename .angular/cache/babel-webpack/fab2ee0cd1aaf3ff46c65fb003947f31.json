{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { InMemoryCache } from '@apollo/client/core';\nimport { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { HttpLink } from 'apollo-angular/http';\nimport { AppComponent } from './app.component';\nimport { APOLLO_NAMED_OPTIONS } from 'apollo-angular';\nimport * as realm from './realm';\nimport { AppRoutingModule } from './app-routing.module';\nimport { environment } from '../environments/environment';\nimport { CoreModule } from './modules/core/core.module';\nimport { SharedModule } from './modules/shared/shared.module';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AuthModule } from '@auth0/auth0-angular';\nimport { authReducer } from './modules/user/state/auth.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './modules/user/state/auth.effects';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@ngrx/effects\";\nimport * as i4 from \"@ngrx/store-devtools\";\nimport * as i5 from \"@auth0/auth0-angular\";\nimport * as i6 from \"@ngx-formly/core\"; // AoT requires an exported function for factories\n\nexport function HttpLoaderFactory(http) {\n  return new TranslateHttpLoader(http);\n}\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: APOLLO_NAMED_OPTIONS,\n\n      useFactory(httpLink) {\n        return {\n          readAndWriteClient: {\n            // <-- this settings will be saved by name: newClientName\n            cache: new InMemoryCache(),\n            link: httpLink.create({\n              uri: realm.graphqlUrlReadWrite,\n              headers: new HttpHeaders().set('Authorization', `Bearer ${sessionStorage.getItem('tokenReadWrite')}`)\n            })\n          },\n          writeClient: {\n            // <-- this settings will be saved by name: newClientName\n            cache: new InMemoryCache(),\n            link: httpLink.create({\n              uri: realm.graphqlUrl,\n              headers: new HttpHeaders().set('Authorization', `Bearer ${sessionStorage.getItem('token')}`)\n            })\n          }\n        };\n      },\n\n      deps: [HttpLink]\n    }],\n    imports: [[BrowserModule, AppRoutingModule, HttpClientModule, ReactiveFormsModule, CoreModule, SharedModule, TranslateModule.forRoot({\n      defaultLanguage: 'de',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }), StoreModule.forRoot({\n      auth: authReducer\n    }), EffectsModule.forRoot([AuthEffects]), StoreDevtoolsModule.instrument({\n      name: 'Schlosswochen Inscription',\n      maxAge: 25,\n      logOnly: environment.production\n    }), AuthModule.forRoot({\n      domain: 'dev-zgesjpx3.us.auth0.com',\n      clientId: 'oLf1CMEnJpsEEpvuLh91c2ilU7HuGmrD',\n      redirectUri: window.location.origin\n    }), FormlyModule.forRoot({\n      extras: {\n        lazyRender: true\n      }\n    }), FormlyBootstrapModule]]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}