{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { print } from 'graphql';\n;\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var defaultPrinter = function (ast, printer) {\n  return printer(ast);\n};\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation, defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = {};\n  var http = {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), headersToLowerCase(config.headers))\n    });\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = __assign(__assign({}, http), config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = printer(query, print);\n  return {\n    options: options,\n    body: body\n  };\n}\n;\n\nfunction headersToLowerCase(headers) {\n  if (headers) {\n    var normalized_1 = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n      normalized_1[name.toLowerCase()] = headers[name];\n    });\n    return normalized_1;\n  }\n\n  return headers;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map","map":null,"metadata":{},"sourceType":"module"}