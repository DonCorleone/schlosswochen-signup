{"ast":null,"code":"import { combineLatest, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport * as fromAuthActions from './auth.actions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../service/auth.service\"; // function createEffect(param: () => any, param2: { dispatch: boolean }) {}\n\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.login$ = createEffect(() => this.actions$.pipe(ofType(fromAuthActions.login), tap(() => this.authService.login())), {\n        dispatch: false\n      });\n      this.logout$ = createEffect(() => this.actions$.pipe(ofType(fromAuthActions.logout), tap(() => this.authService.logout()), switchMap(() => of(fromAuthActions.logoutComplete()))));\n      this.checkAuth$ = createEffect(() => this.actions$.pipe( // If an action with the type 'checkAuth' occurs in the actions$ stream...\n      ofType(fromAuthActions.checkAuth), // return an observable including the latest info from 'isLoggedIn' and 'userProfile'\n      switchMap(() => combineLatest([this.authService.isLoggedIn$, this.authService.user$])), // Take it out and return the appropriate action based on if logged in or not\n      switchMap(([isLoggedIn, profile]) => {\n        if (isLoggedIn) {\n          return of(fromAuthActions.loginComplete({\n            profile,\n            isLoggedIn\n          }));\n        }\n\n        return of(fromAuthActions.logoutComplete());\n      })));\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}