{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { of, throwError } from 'rxjs';\nimport { tap, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nexport let InscriptionsService = /*#__PURE__*/(() => {\n  class InscriptionsService {\n    constructor(apolloProvider) {\n      this.apolloProvider = apolloProvider;\n      this.apollo = this.apolloProvider.use('writeClient');\n    }\n\n    getInscription$(externalUserId, id) {\n      if ((externalUserId == null || externalUserId == '') && id != '') {\n        return of(this.initializeInscription(id));\n      }\n\n      return this.apollo.watchQuery({\n        query: gql`\n          query ($externalUserId: String!) {\n            subscription(query: { externalUserId: $externalUserId }) {\n              _id\n              externalUserId\n              reservationDate\n              week\n              numOfChildren\n              email\n              phone\n              salutation\n              firstName\n              lastName\n              street1\n              street2\n              zip\n              city\n              country\n              participants {\n                participant_id\n                externalUserId\n                salutation\n                firstNameParticipant\n                lastNameParticipant\n                birthday\n                comment\n                fotoAllowed\n              }\n            }\n          }\n        `,\n        variables: {\n          externalUserId\n        }\n      }).valueChanges.pipe(tap(result => console.log(JSON.stringify(result))), map(result => {\n        var _a;\n\n        return (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.subscription;\n      }), catchError(this.handleError));\n    }\n\n    updateInscription(id, variable) {\n      return this.apollo.mutate({\n        mutation: gql`\n          mutation (\n            $id: ObjectId\n            $subscriptionUpdateInput: SubscriptionUpdateInput!\n          ) {\n            updateOneSubscription(\n              query: { _id: $id }\n              set: $subscriptionUpdateInput\n            ) {\n              _id\n            }\n          }\n        `,\n        variables: {\n          id,\n          subscriptionUpdateInput: variable\n        }\n      }).pipe( // tap(result => console.log('SubscriptionService.updateSubscription: updateOneSubscriptionData', JSON.stringify(result))),\n      map(result => {\n        var _a, _b, _c;\n\n        return (_c = (_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.updateOneSubscription) === null || _b === void 0 ? void 0 : _b._id) === null || _c === void 0 ? void 0 : _c.toString();\n      }), catchError(this.handleError));\n    }\n\n    updateExternalUserId(id, variable) {\n      return this.apollo.mutate({\n        mutation: gql`\n          mutation ($id: ObjectId, $externalUserId: String!) {\n            updateOneSubscription(\n              query: { _id: $id }\n              set: { externalUserId: $externalUserId }\n            ) {\n              _id\n            }\n          }\n        `,\n        variables: {\n          id,\n          externalUserId: variable\n        }\n      }).pipe( //   tap(result => console.log('SubscriptionService.updateExternalUserId: updateOneSubscriptionData', JSON.stringify(result))),\n      map(result => {\n        var _a, _b;\n\n        return (_b = (_a = result.data.updateOneSubscription) === null || _a === void 0 ? void 0 : _a._id) === null || _b === void 0 ? void 0 : _b.toString();\n      }), catchError(this.handleError));\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage;\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n\n      console.error(err);\n      return throwError(errorMessage);\n    }\n\n    initializeInscription(id) {\n      // Return an initialized inscription\n      return {\n        _id: id,\n        city: '',\n        country: '',\n        deadline: new Date(),\n        email: '',\n        externalUserId: '',\n        firstName: '',\n        lastName: '',\n        numOfChildren: 0,\n        participants: [],\n        phone: '',\n        reservationDate: new Date(),\n        salutation: '',\n        state: '',\n        street1: '',\n        street2: '',\n        week: 0,\n        zip: ''\n      };\n    }\n\n  }\n\n  InscriptionsService.ɵfac = function InscriptionsService_Factory(t) {\n    return new (t || InscriptionsService)(i0.ɵɵinject(i1.Apollo));\n  };\n\n  InscriptionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InscriptionsService,\n    factory: InscriptionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return InscriptionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}