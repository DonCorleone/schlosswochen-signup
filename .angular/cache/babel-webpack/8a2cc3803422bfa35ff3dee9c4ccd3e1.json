{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nexport let ReservationService = /*#__PURE__*/(() => {\n  class ReservationService {\n    constructor(apolloProvider) {\n      this.apolloProvider = apolloProvider;\n      this.apollo = this.apolloProvider.use('writeClient');\n    }\n\n    createWeeklyReservation(variable) {\n      return this.apollo.mutate({\n        mutation: gql`\n        mutation insertSubscription($subscriptionInsertInput: SubscriptionInsertInput!) {\n          insertOneSubscription(\n            data: $subscriptionInsertInput\n          ){\n            _id\n            deadline\n            week\n            numOfChildren\n          }\n        }\n      `,\n        variables: variable\n      }).pipe(tap(data => console.log('ReservationService.createWeeklyReservation.insertOneSubscription', JSON.stringify(data))), map(result => {\n        return result.data.insertOneSubscription._id;\n      }), catchError(this.handleError));\n    }\n\n    getReservationsPerWeek(week) {\n      console.log(`Get Reservations Per Week`);\n      return this.apollo.watchQuery({\n        query: gql`\n          query GetReservationsPerWeek($week:Int!) {\n            sumChildsPerState(input: $week) {\n              state\n              sumPerStateAndWeek\n            }\n          }\n        `,\n        variables: {\n          week: week\n        },\n        fetchPolicy: 'no-cache'\n      }).valueChanges.pipe(tap(result => console.log(JSON.stringify(result))), map(result => result.data.sumChildsPerState));\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage;\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n\n      console.error(err);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ReservationService.ɵfac = function ReservationService_Factory(t) {\n    return new (t || ReservationService)(i0.ɵɵinject(i1.Apollo));\n  };\n\n  ReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservationService,\n    factory: ReservationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReservationService;\n})();","map":null,"metadata":{},"sourceType":"module"}