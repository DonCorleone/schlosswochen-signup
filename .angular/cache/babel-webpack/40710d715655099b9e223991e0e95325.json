{"ast":null,"code":"import * as InscriptionAction from './inscription.actions';\nimport { createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\nexport const inscriptionFeatureKey = 'inscription';\nconst initialState = {\n  inscription: {\n    _id: '',\n    salutation: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    street1: '',\n    street2: '',\n    city: '',\n    state: 'temporary',\n    zip: '',\n    participants: [],\n    externalUserId: ''\n  },\n  currentParticipantNumber: 0\n}; // Selector functions\n\nconst getInscriptionFeatureState = createFeatureSelector(inscriptionFeatureKey);\nexport const getInscription = createSelector(getInscriptionFeatureState, state => state.inscription);\nexport const getCurrentParticipantNumber = createSelector(getInscriptionFeatureState, state => state.currentParticipantNumber);\nexport const selectParticipantId = state => state.inscription; // selector with param\n\nexport const selectParticipantById = participantId => createSelector(selectParticipantId, inscription => {\n  var _a;\n\n  return (_a = inscription === null || inscription === void 0 ? void 0 : inscription.participants) === null || _a === void 0 ? void 0 : _a.find(c => (c === null || c === void 0 ? void 0 : c.participant_id) === participantId);\n});\nexport const inscriptionReducer = createReducer(initialState, on(InscriptionAction.setInscription, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    inscription: action.inscription\n  });\n}), on(InscriptionAction.addParticipant, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    inscription: Object.assign(Object.assign({}, state.inscription), {\n      participants: [...state.inscription.participants, action.participant]\n    })\n  });\n}), on(InscriptionAction.upsertParticipant, (state, action) => {\n  var _a, _b;\n\n  const index = (_a = state.inscription.participants) === null || _a === void 0 ? void 0 : _a.findIndex(participant => (participant === null || participant === void 0 ? void 0 : participant.participant_id) === action.participant.participant_id); //finding index of the item\n  // @ts-ignore\n\n  const newArray = [...((_b = state.inscription) === null || _b === void 0 ? void 0 : _b.participants)]; //making a new array\n\n  newArray[index] = action.participant; //changing value in the new array\n\n  const inscription = Object.assign({}, state.inscription);\n  inscription.participants = newArray;\n  return Object.assign(Object.assign({}, state), {\n    //copying the orignal state\n    inscription\n  });\n}), on(InscriptionAction.increaseCurrentParticipantNumber, state => {\n  return Object.assign(Object.assign({}, state), {\n    currentParticipantNumber: state.currentParticipantNumber + 1\n  });\n}), on(InscriptionAction.decreaseCurrentParticipantNumber, state => {\n  return Object.assign(Object.assign({}, state), {\n    currentParticipantNumber: state.currentParticipantNumber - 1\n  });\n}), on(InscriptionAction.resetCurrentParticipantNumber, state => {\n  return Object.assign(Object.assign({}, state), {\n    currentParticipantNumber: 0\n  });\n}));","map":null,"metadata":{},"sourceType":"module"}