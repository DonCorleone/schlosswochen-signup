{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as Realm from 'realm-web';\nconst graphqlUrl = `https://realm.mongodb.com/api/client/v2.0/app/${process.env.APP_ID_REALM}/graphql`;\nconst graphqlUrlReadWrite = `https://realm.mongodb.com/api/client/v2.0/app/${process.env.APP_ID_REALM_READWRITE}/graphql`; // Connect to your MongoDB Realm app\n\nconst app = new Realm.App(process.env.APP_ID_REALM);\nconst appReadWrite = new Realm.App(process.env.APP_ID_REALM_READWRITE); // Get a valid Realm user access token to authenticate requests\n\nfunction getValidAccessToken() {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!app.currentUser) // If no user is logged in, log in an anonymous user\n      {\n        yield app.logIn(Realm.Credentials.anonymous()).then(x => {\n          var _a;\n\n          sessionStorage.setItem('token', (_a = app.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken);\n          return x.accessToken;\n        });\n      } else // The logged in user's access token might be stale,\n      // Refreshing custom data also refreshes the access token\n      {\n        yield app.currentUser.refreshCustomData().then(x => {\n          var _a;\n\n          sessionStorage.setItem('token', (_a = app.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken);\n          return x.accessToken;\n        });\n      }\n\n    return (_a = app.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken;\n  });\n}\n\nfunction getValidAccessTokenReadWrite() {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!appReadWrite.currentUser) // If no user is logged in, log in an anonymous user\n      {\n        yield appReadWrite.logIn(Realm.Credentials.anonymous()).then(x => {\n          var _a;\n\n          sessionStorage.setItem('tokenReadWrite', (_a = app.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken);\n          return x.accessToken;\n        });\n      } else // The logged in user's access token might be stale,\n      // Refreshing custom data also refreshes the access token\n      {\n        yield appReadWrite.currentUser.refreshCustomData().then(x => {\n          var _a;\n\n          sessionStorage.setItem('tokenReadWrite', (_a = app.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken);\n          return x.accessToken;\n        });\n      }\n\n    return (_a = appReadWrite.currentUser) === null || _a === void 0 ? void 0 : _a.accessToken;\n  });\n}\n\nexport { graphqlUrl, graphqlUrlReadWrite, getValidAccessToken, getValidAccessTokenReadWrite };","map":null,"metadata":{},"sourceType":"module"}